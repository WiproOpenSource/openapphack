import org.apache.tools.ant.filters.*

buildscript {
    repositories {
        jcenter()
    }
}

apply plugin: 'groovy'
apply plugin: 'idea'
apply plugin: 'eclipse'

defaultTasks 'clean', 'prepareTestScripts', 'prepareScripts', 'prepareServer', 'prepareTemplates', 'assembleArchive', 'test'

def userHome = System.getProperty('user.home')
ext.installBinDir = "${userHome}/.openapphack/bin"
ext.installSrcDir = "${userHome}/.openapphack/src"

ext.defaultopenapphackVersion = '1.0.0-SNAPSHOT'

loadConfiguration()

repositories {
    jcenter()
}

dependencies {
    compile 'org.codehaus.groovy:groovy:2.3.7'
    compile 'org.codehaus.groovy:groovy-templates:2.3.7'
    testCompile 'junit:junit:4.11'
    testCompile 'info.cukes:cucumber-groovy:1.1.8'
    testCompile 'info.cukes:cucumber-junit:1.1.8'
    testCompile 'org.spockframework:spock-core:0.7-groovy-2.0'
    testCompile 'com.github.tomakehurst:wiremock:1.46'
}

test.testLogging.exceptionFormat = 'full'

def loadConfiguration() {
    def environment = hasProperty('env') ? env : 'local'
    ext.environment = environment
    println "Environment is set to: $environment"

    def configFile = file('config.groovy')
    def config = new ConfigSlurper(environment).parse(configFile.toURL())
    ext.config = config
}

task prepareTemplates(type: Copy) {
	from "src/main/templates"
	into "build/templates"
	include "*.gtpl"
}

task prepareServer(type: Copy){
	from 'src/main/vertx'
	into 'build/server'
	include 'server.groovy'
	filter(ReplaceTokens, tokens: [OPENAPPHACK_VERSION:config.openapphackVersion ?: defaultopenapphackVersion, VERTX_VERSION:config.vertxVersion])
}

task prepareTestScripts(type: Copy) {
    from 'src/main/bash'
    into 'build/testScripts'
    include '**/*'
    filter(ReplaceTokens, tokens:
        [
            OPENAPPHACK_VERSION          : "x.y.z",
            OPENAPPHACK_SERVICE          : config.openapphackService,
            OPENAPPHACK_BROKER_SERVICE   : config.openapphackBrokerService,
            OPENAPPHACK_BROADCAST_SERVICE: config.openapphackBroadcastService
        ]
    )
}

task prepareScripts(type: Copy) {
    from 'src/main/bash'
    into 'build/scripts'
    include '**/*'
    filter(ReplaceTokens, tokens:
        [
            OPENAPPHACK_VERSION          : config.openapphackVersion ?: defaultopenapphackVersion,
            OPENAPPHACK_SERVICE          : config.openapphackService,
            OPENAPPHACK_BROKER_SERVICE   : config.openapphackBrokerService,
            OPENAPPHACK_BROADCAST_SERVICE: config.openapphackBroadcastService
        ]
    )
}

task assembleArchive(type: Zip) {
	classifier = 'scripts'
	from "build/scripts"
	include "app*"
}

task cleanInstallInit(type: Delete) {
	delete installBinDir
}

task cleanInstallModules(type: Delete) {
    delete installSrcDir
}

task installInit(type: Copy, dependsOn: [cleanInstallInit, prepareScripts]) {
	from "build/scripts"
	into installBinDir
	include "app-init.sh"
}

task installModules(type: Copy, dependsOn: [cleanInstallModules, prepareScripts]) {
    from "build/scripts"
    into installSrcDir
    include "app-*.sh"
    exclude "app-init.sh"
}

task install(dependsOn: [installInit, installModules])
